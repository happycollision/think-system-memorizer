{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","think-system-memorizer/tests/acceptance/card-interactions-test.js","think-system-memorizer/tests/factories/index.js","think-system-memorizer/tests/helpers/ember-cli-clipboard.js","think-system-memorizer/tests/integration/components/card-deck-test.js","think-system-memorizer/tests/integration/components/card-decks-data-test.js","think-system-memorizer/tests/integration/components/flip-card-test.js","think-system-memorizer/tests/integration/components/libretto-list-test.js","think-system-memorizer/tests/integration/components/scroll-on-init-test.js","think-system-memorizer/tests/integration/components/swiper-loop-test.js","think-system-memorizer/tests/integration/helpers/slugify-test.js","think-system-memorizer/tests/lint/app.lint-test.js","think-system-memorizer/tests/lint/templates.template.lint-test.js","think-system-memorizer/tests/lint/tests.lint-test.js","think-system-memorizer/tests/test-helper.js","think-system-memorizer/tests/unit/controllers/librettos-test.js","think-system-memorizer/tests/unit/controllers/librettos/show-test.js","think-system-memorizer/tests/unit/reducers/card-decks-test.js","think-system-memorizer/tests/unit/routes/index-test.js","think-system-memorizer/tests/unit/routes/librettos-test.js","think-system-memorizer/tests/unit/routes/librettos/show-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"think-system-memorizer/tests/acceptance/card-interactions-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | card interactions', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('clicking can flip a card', async function (assert) {\n      await (0, _testHelpers.visit)('/librettos/elf-jovie?view=cards');\n      assert.dom('.flipped [data-test-card-front]').doesNotExist();\n      await (0, _testHelpers.click)('[data-test-card-front]');\n      assert.dom('.flipped [data-test-card-front]').exists();\n    });\n    (0, _qunit.test)('the next and previous buttons move the cards along', async function (assert) {\n      await (0, _testHelpers.visit)('/librettos/elf-jovie?view=cards');\n      await (0, _testHelpers.click)('[data-test-next-card]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=2'));\n      await (0, _testHelpers.click)('[data-test-previous-card]');\n      assert.notOk((0, _testHelpers.currentURL)().match('card=2'));\n    });\n    (0, _qunit.test)('data store card index matches url', async function (assert) {\n      await (0, _testHelpers.visit)('/librettos/elf-jovie?view=cards&card=3');\n      const redux = this.owner.lookup('service:redux');\n\n      const currentState = () => redux.getState();\n\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').currentIndex, 2, 'First card showing is card 3 (index 2)');\n      await (0, _testHelpers.click)('[data-test-next-card]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').currentIndex, 3, 'Card showing is card 4 (index 3)');\n    });\n    (0, _qunit.test)('re-memorize sequencially steps through cards', async function (assert) {\n      await (0, _testHelpers.visit)('/librettos/elf-jovie?view=cards');\n      const redux = this.owner.lookup('service:redux');\n\n      const currentState = () => redux.getState();\n\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[0].isFlipped, true, 'the first card gets flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=2'), 'The second card is showing');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[1].isFlipped, true, 'the second card gets flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=3'), 'The third card is showing');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[2].isFlipped, true, 'the third card gets flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=4'), 'The fourth card is showing');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[3].isFlipped, true, 'the fourth card gets flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=2'), 'The second card is showing again');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[1].isFlipped, false, 'the second card is no longer flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[1].isFlipped, true, 'the second card is flipped again');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=3'), 'The third card is showing again');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[2].isFlipped, false, 'the third card is no longer flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[2].isFlipped, true, 'the third card is flipped again');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=4'), 'The fourth card is showing again');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[3].isFlipped, false, 'the fourth card is no longer flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[3].isFlipped, true, 'the fourth card is flipped again');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=5'), 'The fifth card is showing');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[4].isFlipped, true, 'the fifth card gets flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.ok((0, _testHelpers.currentURL)().match('card=3'), 'The third card is showing again');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[2].isFlipped, false, 'the third card is no longer flipped');\n      await (0, _testHelpers.click)('[data-test-sequencial-memorize]');\n      assert.equal(currentState().cardDecks.decks.find(d => d.name === 'Elf: Jovie').cards[2].isFlipped, true, 'the third card is flipped again');\n    });\n  });\n});","define(\"think-system-memorizer/tests/factories/index\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.create = create;\n  _exports.createList = createList;\n  _exports.default = void 0;\n\n  class Definitions {\n    constructor() {\n      this.card = () => ({\n        id: getNewId(),\n        front: `front content for id ${lastId()}`,\n        back: `back content for id ${lastId()}`,\n        isFlipped: false\n      });\n\n      this.cardDeck = () => ({\n        name: `Deck #${getNewId()}`,\n        cards: createList('card', 2),\n        currentIndex: 0\n      });\n\n      this.cardDecks = () => {\n        const decks = createList('cardDeck', 2);\n        return {\n          decks\n        };\n      };\n    }\n\n  }\n\n  const definitions = new Definitions();\n  let incrementor = 1;\n\n  function getNewId() {\n    return incrementor++;\n  }\n\n  function lastId() {\n    return incrementor;\n  }\n\n  function getFactory(faketory) {\n    if (definitions[faketory] === undefined) {\n      throw new Error(`Test factory \\`create('${faketory}')\\` failed. There is no factory called \"${faketory}\"`);\n    }\n\n    return definitions[faketory]();\n  }\n\n  function create(faketory, overrides) {\n    let obj = getFactory(faketory);\n    overrides = overrides || {};\n    return Object.assign(obj, overrides);\n  }\n\n  function createList(factory, amount, overrides) {\n    return Array.from(new Array(amount)).map(() => create(factory, overrides));\n  }\n\n  var _default = create;\n  _exports.default = _default;\n});","define(\"think-system-memorizer/tests/helpers/ember-cli-clipboard\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.triggerSuccess = triggerSuccess;\n  _exports.triggerError = triggerError;\n  _exports.default = _default;\n\n  /* === Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration testâ€™s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerSuccess(context, selector) {\n    fireComponentAction(context, selector, 'success');\n  }\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration testâ€™s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerError(context, selector) {\n    fireComponentAction(context, selector, 'error');\n  }\n  /* === Acceptance Test Helpers === */\n\n  /**\n   * Default export is a function that registers acceptance test helpers\n   */\n\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'success');\n    });\n    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'error');\n    });\n  }\n  /* === Private Functions === */\n\n  /**\n   * Fires named action for an instance of a copy-button component in an app\n   * @function fireComponentActionFromApp\n   * @param {Object} app - Ember application\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireComponentActionFromApp(app, selector, actionName) {\n    fireComponentAction({\n      container: app.__container__,\n      $: app.$\n    }, selector, actionName);\n  }\n  /**\n   * Fires named action for an instance of a copy-button component\n   * @function fireComponentAction\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireComponentAction(context, selector, actionName) {\n    let component = getComponentBySelector(context, selector);\n    fireActionByName(component, actionName);\n  }\n  /**\n   * Fetches component reference for a given context and selector\n   * @function getComponentBySelector\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Object} component object\n   */\n\n\n  function getComponentBySelector(context, selector = '.copy-btn') {\n    let emberId = context.$(selector).attr('id');\n    return context.container.lookup('-view-registry:main')[emberId];\n  }\n  /**\n   * Fires a component's action given an action name\n   * @function fireActionByName\n   * @param {Ember.Component} component - component to fire action from\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireActionByName(component, actionName) {\n    let action = component[actionName];\n    Ember.run(() => {\n      if (typeof action === 'string') {\n        component.sendAction(action);\n      } else {\n        action();\n      }\n    });\n  }\n});","define(\"think-system-memorizer/tests/integration/components/card-deck-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | card-deck', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      this.set('cards', [{\n        front: 'hi',\n        back: 'there',\n        isFlipped: true\n      }]); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ew4GVqCS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"card-deck\\\",[],[[\\\"@cards\\\",\\\"@currentIndex\\\"],[[21,\\\"cards\\\"],0]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-flip-card] [data-test-card-front]').matchesText('hi');\n      assert.dom('[data-test-flip-card] [data-test-card-back]').matchesText('there');\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/components/card-decks-data-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"think-system-memorizer/tests/factories\"], function (_qunit, _emberQunit, _testHelpers, _factories) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | card-decks-data', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it supplies the cards for a given deck', async function (assert) {\n      const winningDeck = (0, _factories.create)('cardDeck', {\n        name: 'Winner',\n        cards: (0, _factories.createList)('card', 2, {\n          front: 'winner',\n          back: 'winner'\n        })\n      });\n      const cardDecks = (0, _factories.create)('cardDecks', {\n        decks: [winningDeck]\n      });\n      this.set('deckName', 'Winner');\n      const redux = this.owner.lookup('service:redux');\n\n      redux.getState = () => ({\n        cardDecks\n      });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"sJUBNXkw\",\n        \"block\": \"{\\\"symbols\\\":[\\\"decks\\\",\\\"card\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"card-decks-data\\\",[],[[\\\"@name\\\"],[[21,\\\"deckName\\\"]]],{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[22,1,[\\\"single\\\"]]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[1,[22,2,[\\\"front\\\"]],false],[0,\\\" \\\"],[1,[22,2,[\\\"back\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom().hasTextContaining('winner');\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/components/flip-card-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | flip-card', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders the front of a card', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Oo759doE\",\n        \"block\": \"{\\\"symbols\\\":[\\\"card\\\"],\\\"statements\\\":[[5,\\\"flip-card\\\",[],[[],[]],{\\\"statements\\\":[[6,[22,1,[\\\"front\\\"]],[],[[],[]],{\\\"statements\\\":[[0,\\\"Hello\\\"]],\\\"parameters\\\":[]}],[6,[22,1,[\\\"back\\\"]],[],[[],[]],{\\\"statements\\\":[[0,\\\"There\\\"]],\\\"parameters\\\":[]}]],\\\"parameters\\\":[1]}]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-card-front]').hasText('Hello');\n      assert.dom('[data-test-card-back]').hasText('There');\n    });\n    (0, _qunit.test)('it adds the flipped class when flipped (so css works)', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      this.set('flipped', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"P2pV6vlU\",\n        \"block\": \"{\\\"symbols\\\":[\\\"card\\\"],\\\"statements\\\":[[5,\\\"flip-card\\\",[],[[\\\"@flipped\\\"],[[21,\\\"flipped\\\"]]],{\\\"statements\\\":[[6,[22,1,[\\\"back\\\"]],[],[[],[]],{\\\"statements\\\":[[0,\\\"Hello\\\"]],\\\"parameters\\\":[]}]],\\\"parameters\\\":[1]}]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-flip-card]').hasNoClass('flipped', 'Back starts hidden');\n      this.set('flipped', true);\n      assert.dom('[data-test-flip-card]').hasClass('flipped', 'Back becomes visible');\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/components/libretto-list-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | libretto-list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders links to librettos', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      this.set('librettos', [{\n        label: 'Some Show',\n        file: '/files/some-show.txt'\n      }, {\n        label: 'Some Show 2: Electric Boogaloo',\n        file: '/files/some-show2.txt'\n      }, {\n        label: 'Anything Goes',\n        file: '/files/boat.txt'\n      }]);\n      this.owner.lookup('router:main').setupRouter();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GRbQltzK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"libretto-list\\\",[],[[\\\"@librettos\\\"],[[21,\\\"librettos\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('a[href$=\"some-show\"]').containsText('Some Show');\n      assert.dom('a[href$=\"some-show-2-electric-boogaloo\"]').containsText('Some Show 2: Electric Boogaloo');\n      assert.dom('a[href$=\"anything-goes\"]').containsText('Anything Goes');\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/components/scroll-on-init-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | scroll-on-init', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0MOilBHw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"scroll-on-init\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fdquPMxW\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"scroll-on-init\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/components/swiper-loop-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | swiper-loop', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('things', ['thing1', 'thing2']); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+9uolccJ\",\n        \"block\": \"{\\\"symbols\\\":[\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"swiper-loop\\\",[],[[\\\"@items\\\",\\\"@currentIndex\\\"],[[21,\\\"things\\\"],0]],{\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[1,[22,1,[]],false],[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('[data-test-swiper-loop]').matchesText(/thing1 ?\\s* ?thing2/);\n    });\n  });\n});","define(\"think-system-memorizer/tests/integration/helpers/slugify-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | slugify', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', 'hi there 2: people');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"45geNnjF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"slugify\\\",[[23,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom().containsText('hi-there-2-people');\n    });\n  });\n});","define(\"think-system-memorizer/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/flip-card/side.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/flip-card/side.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/libretto-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/libretto-list.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/background-colors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/background-colors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/background-size.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/background-size.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/border-colors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/border-colors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/border-radius.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/border-radius.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/border-widths.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/border-widths.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/colors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/colors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/font-weights.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/font-weights.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/fonts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/fonts.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/height.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/height.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/letter-spacing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/letter-spacing.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/line-height.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/line-height.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/margin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/margin.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/max-height.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/max-height.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/max-width.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/max-width.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/min-height.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/min-height.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/min-width.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/min-width.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/negative-margin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/negative-margin.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/opacity.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/opacity.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/padding.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/padding.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/screens.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/screens.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/shadows.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/shadows.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/svg-fill.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/svg-fill.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/svg-stroke.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/svg-stroke.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/tailwind.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/tailwind.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/text-colors.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/text-colors.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/text-sizes.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/text-sizes.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/width.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/width.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('tailwind/config/z-index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'tailwind/config/z-index.js should pass ESLint\\n\\n');\n  });\n});","define(\"think-system-memorizer/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('think-system-memorizer/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/card-deck.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/card-deck.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/card-decks-data.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/card-decks-data.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/flip-card.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/flip-card.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/flip-card/side.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/flip-card/side.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/libretto-list.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/libretto-list.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/scroll-on-init.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/scroll-on-init.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/components/swiper-loop.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/components/swiper-loop.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/librettos.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/librettos.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('think-system-memorizer/templates/librettos/show.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'think-system-memorizer/templates/librettos/show.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"think-system-memorizer/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define(\"think-system-memorizer/tests/test-helper\", [\"think-system-memorizer/app\", \"think-system-memorizer/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"think-system-memorizer/tests/unit/controllers/librettos-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | librettos', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:librettos');\n      assert.ok(controller);\n    });\n  });\n});","define(\"think-system-memorizer/tests/unit/controllers/librettos/show-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | librettos/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:librettos/show');\n      assert.ok(controller);\n    });\n  });\n});","define(\"think-system-memorizer/tests/unit/reducers/card-decks-test\", [\"qunit\", \"ember-qunit\", \"ember-redux-freeze\", \"think-system-memorizer/reducers\", \"think-system-memorizer/tests/factories\"], function (_qunit, _emberQunit, _emberReduxFreeze, _reducers, _factories) {\n  \"use strict\";\n\n  // @ts-ignore\n  (0, _qunit.module)('Unit | Reducers | card-decks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('set a new current index', function (assert) {\n      const cardDecks = {\n        decks: [(0, _factories.create)('cardDeck', {\n          name: 'anyDeck',\n          currentIndex: 0\n        })]\n      };\n      (0, _emberReduxFreeze.deepFreeze)(cardDecks);\n      const result = (0, _reducers.default)({\n        cardDecks\n      }, {\n        type: _reducers.IActionType.SetCardIndex,\n        name: 'anyDeck',\n        newIndex: 1\n      });\n      assert.deepEqual(result, {\n        cardDecks: {\n          decks: [{ ...cardDecks.decks[0],\n            currentIndex: 1\n          }]\n        }\n      });\n    });\n    (0, _qunit.test)('reset all cards to unflipped', function (assert) {\n      const cardList1 = (0, _factories.createList)('card', 3, {\n        isFlipped: true\n      });\n      const cardList2 = (0, _factories.createList)('card', 3, {\n        isFlipped: true\n      });\n      const cardDecks = {\n        decks: [(0, _factories.create)('cardDeck', {\n          name: 'changeDeck',\n          cards: cardList1\n        }), (0, _factories.create)('cardDeck', {\n          name: 'untouchedDeck',\n          cards: cardList2\n        })]\n      };\n      (0, _emberReduxFreeze.deepFreeze)(cardDecks);\n      const result = (0, _reducers.default)({\n        cardDecks\n      }, {\n        type: _reducers.IActionType.UnflipAllInDeck,\n        name: 'changeDeck'\n      });\n      assert.deepEqual(result, {\n        cardDecks: {\n          decks: [{ ...cardDecks.decks[0],\n            cards: cardList1.map(card => ({ ...card,\n              isFlipped: false\n            }))\n          }, { ...cardDecks.decks[1],\n            cards: cardList2\n          }]\n        }\n      });\n    });\n    (0, _qunit.test)('flip a card, and flip it back', function (assert) {\n      const cardList = (0, _factories.createList)('card', 3, {\n        isFlipped: false\n      });\n      const firstId = cardList[0].id;\n      const [, ...tail] = cardList;\n      const cardDecks = {\n        decks: [(0, _factories.create)('cardDeck', {\n          name: 'anyDeck',\n          cards: cardList\n        })]\n      };\n      (0, _emberReduxFreeze.deepFreeze)(cardDecks);\n      const result = (0, _reducers.default)({\n        cardDecks\n      }, {\n        type: _reducers.IActionType.FlipCard,\n        id: firstId\n      });\n      assert.deepEqual(result, {\n        cardDecks: {\n          decks: [(0, _factories.create)('cardDeck', {\n            name: 'anyDeck',\n            cards: [{ ...cardList[0],\n              isFlipped: true\n            }, ...tail]\n          })]\n        }\n      });\n      const nextResult = (0, _reducers.default)(result, {\n        type: _reducers.IActionType.FlipCard,\n        id: firstId\n      });\n      assert.deepEqual(nextResult, {\n        cardDecks: {\n          decks: [(0, _factories.create)('cardDeck', {\n            name: 'anyDeck',\n            cards: [{ ...cardList[0],\n              isFlipped: false\n            }, ...tail]\n          })]\n        }\n      });\n    });\n  });\n});","define(\"think-system-memorizer/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"think-system-memorizer/tests/unit/routes/librettos-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | librettos', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:librettos');\n      assert.ok(route);\n    });\n  });\n});","define(\"think-system-memorizer/tests/unit/routes/librettos/show-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | librettos/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:librettos/show');\n      assert.ok(route);\n    });\n  });\n});","define('think-system-memorizer/config/environment', [], function() {\n  var prefix = 'think-system-memorizer';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('think-system-memorizer/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}